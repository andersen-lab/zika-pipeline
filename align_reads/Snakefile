import os
from datetime import datetime
import time

in_dir="/gpfs/group/andersen/raw_data/161025_M01244_0088_000000000-ANRN2/Unaligned" # Input directory
ext="fastq.gz"                  # The extension supplied using .fastq.gz or .fastq
zika_reference="/gpfs/group/andersen/gkarthik/db/viruses/zika_dc_2016.nix"
primer_path="/gpfs/group/andersen/gkarthik/db/viruses/amplicons_prefix.fa"

s = datetime.now().strftime("%Y.%m.%d."+str(int(time.time())))
out_dir="/gpfs/group/andersen/gkarthik/analysis/"+s

READS1 = []
READS2 = []
for dirname, dirnames, filenames in os.walk(in_dir):
     filenames.sort()
     for f in range(0, len(filenames)-1, 2):
          if ext in filenames[f] and ext in filenames[f+1]:
               READS1.append(filenames[f].replace("."+ext, ""))
               READS2.append(filenames[f+1].replace("."+ext, ""))

def get_read2(wildcards):
     print(wildcards)
     
rule all:
    input:
        expand("{out_dir}/_aligned_bams/{read1}.trimmed.aligned.sorted.bam", out_dir = out_dir, read1 = READS1, read2 = READS2)
        
rule align_reads:
    input:
        "{out_dir}/_trimmed/{read1}.trimmed.fastq",
        "{out_dir}/_trimmed/{read2}.trimmed.fastq",
        "{ref}".format(ref = zika_reference)
    output:
        "{out_dir}/_aligned_bams/{read1}.trimmed.aligned.bam"
    shell:
        "mkdir -p $(dirname {output}) &&"
        "module load samtools &&"
        "/gpfs/home/gkarthik/bin/novoalign/novocraft3/novoalign -f {input[0]} {input[1]} -c 16 -r Random -l 40 -g 40 -x 20 -t 502 -d {input[2]} -o SAM | samtools view -F 4 -Sb -o {output}"

rule sort_aligned_bam:
    input:
        "{out_dir}/_aligned_bams/{read1}.trimmed.aligned.bam"
    output:
        "{out_dir}/_aligned_bams/{read1}.trimmed.aligned.sorted.bam"
    shell:
        "mkdir -p $(dirname {output[0]}) &&"
        "module load samtools &&"
        "samtools sort -T $PBSTMPDIR -o {output} {input}"

rule trim_reads:
    input:
        read1="{out_dir}/_reads/{read1}.fastq",
        read2="{out_dir}/_reads/{read2}.fastq",
        primer="{primer}".format(primer=primer_path)
    output:
        trim1="{out_dir}/_trimmed/{read1}.trimmed.fastq",
        trim2="{out_dir}/_trimmed/{read2}.trimmed.fastq"
    shell:
        "mkdir -p $(dirname {output.trim1})/ && "
        "unpaired1=${{output.trim1}/.trimmed.fastq/} && "
        "unpaired2=${{output.trim2}/.trimmed.fastq/} && "
        "java -Xmx2g -classpath /gpfs/home/gkarthik/bin/trimmomatic/trimmomatic-0.35.jar org.usadellab.trimmomatic.TrimmomaticPE -threads 16  {input.read1} {input.read2} {output.trim1} $unpaired1.trimmed_unpaired.fastq {output.trim2} $unpaired2.trimmed_unpaired.fastq ILLUMINACLIP:{input.primer}:2:30:12 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:25 MINLEN:30 HEADCROP:22"

rule extract_read_1:
    input:
        "{in_dir}".format(in_dir = in_dir)+"/{read1}.fastq.gz"
    output:
        "{out_dir}/_reads/{read1}.fastq"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        'if [ "${gz}" == true ]; then gunzip -c {input} > {output}; else cp {input} {output};'

rule extract_read_2:
    input:
        "{in_dir}/{read2}.fastq.gz"
    output:
        "{out_dir}/_reads/{read2}.fastq"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        'if [ "${gz}" == true ]; then gunzip -c {input} > {output}; else cp {input} {output};'
